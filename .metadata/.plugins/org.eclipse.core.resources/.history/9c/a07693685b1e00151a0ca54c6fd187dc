package main;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class CppClassReaderWriter {
    private File   cppFile;
    private String cppText;
    private File   headerFile;
    private String headerText;

    public void read(File aHeaderFile, File aCppFile) throws IOException {
        cppFile = aCppFile;        
        cppText = readFile(aCppFile.getAbsolutePath());
        
        headerFile = aHeaderFile;
        headerText = readFile(headerFile.getAbsolutePath());
    }

    public void write(File aHeaderFile, File aCppFile) {
    }

    public boolean containsMethod(String className, String methodName) {
        Pattern p = Pattern.compile(String.format("%s *:: *%s", className, methodName));
        Matcher m = p.matcher(cppText);        
        return m.matches();
    }

    public void addMethod(String className, String methodName, String parameters, String body) throws CppClassReaderWriterException {
        if (containsMethod(className, methodName))
            throw new CppClassReaderWriterException(String.format("La méthode %s::%s existe déjà dans %s", className, methodName, cppFile.getAbsoluteFile()));
    }

    public void appendToMethod(String className, String methodName, String parameters, String body) throws CppClassReaderWriterException {
        if (!containsMethod(className, methodName))
            throw new CppClassReaderWriterException(String.format("La méthode %s::%s n'existe pas dans %s", className, methodName, cppFile.getAbsoluteFile()));

    }

    public void addOrAppendToMethod(String className, String methodName, String parameters, String body) throws CppClassReaderWriterException {
        if (containsMethod(className, methodName))
            appendToMethod(className, methodName, parameters, body);
        else
            addMethod(className, methodName, parameters, body);
    }

    private String readFile(String file) throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(file));
        return new String(encoded);
    }
}
